## Starting parameters
par = c(0.01, 0.01, 5)
lower = c(0.01, 0.01, 1)
upper = c(0.99, 20, 10)
}
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_no_integration_mouse") {
## Starting parameters
par = c(0.01, 5)
lower = c(0.01, 1)
upper = c(20, 10)
}
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_random_walk_mouse") {
## Starting parameters
par = c(0.01, 0.01, 3, 0.1, 5)
lower = c(0.01, 0.01,-5, 0.01, 1)
upper = c(0.99, 20,+5, 1, 10)
}
add_O =  optimx(
par,
match.fun(type_list[type_idx]),
Input_Data = train,
lower = lower,
upper = upper
)
add_O$subject_id = id
add_O$session_id = session_id
add_O$block_id = trial_idx
add_O$trial_n = nrow(train)
add_O$free_param = length(par)
add_O$type = type_list[type_idx]
add_O$AIC = compute_AIC(
LL = -add_O$value,
K =  add_O$free_param,
n = add_O$trial_n,
correction = 0
)
add_O$cAIC = compute_AIC(
LL = -add_O$value,
K =  add_O$free_param,
n = add_O$trial_n,
correction = 1
)
Optim_eval = rbind(Optim_eval, add_O[, c('subject_id', 'session_id', 'block_id', 'value', 'type', 'free_param', 'trial_n', 'convcode')])
}
}
}
}
write.csv(Optim_eval,
paste("./Results/Optim_eval_mouse_interim_min_", as.character(n_start), ".csv", sep = ""),
row.names = FALSE)
# Sum <- ddply(Optim_eval,
#          .(type),
#          summarise,
#          error = mean(abs(value), na.rm = TRUE))
# print(Sum)
}
}
## load human data
# Optim_eval = data.frame()
# human_files = list.files(path='./Results', pattern='Optim_eval_human_')
# for (load_idx in human_files){
# Optim_eval = rbind(Optim_eval, read.csv(paste("./Results/", load_idx, sep = "")))
# }
Optim_eval = read.csv("./Results/Optim_eval_human_complete.csv")
Optim_eval$species = "humans"
Optim_eval$unique_id = as.character(Optim_eval$subject_id * rand(1))
Optim_eval$study_id = NA
for (idx in unique(Optim_eval$subject_id)){
Optim_eval[Optim_eval$subject_id == idx,]$study_id =  Behav[Behav$subject_id == idx,]$study_id
}
## load mouse data
# Optim_eval_mice = data.frame()
# mice_files = list.files(path='./Results', pattern='Optim_eval_mouse_')
# for (load_idx in mice_files){
# Optim_eval_mice = rbind(Optim_eval_mice, read.csv(paste("./Results/", load_idx, sep = "")))
# }
Optim_eval_mice = read.csv("./Results/Optim_eval_mouse_complete.csv")
Optim_eval_mice$species = "mice"
Optim_eval_mice$unique_id = as.character(Optim_eval_mice$subject_id * Optim_eval_mice$session_id * rand(1))
Optim_eval_mice$study_id = NA
## group and rename
Optim_eval = rbind(Optim_eval[,c("value", "type", "free_param", "trial_n", "species", "convcode", "study_id", "unique_id")], Optim_eval_mice[,c("value", "type", "free_param", "trial_n", "species", "convcode", "study_id", "unique_id")])
Optim_eval$type = gsub("_mouse", "", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_no_integration", "5: no-evidence-accumulation", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_no_amp", "4: normative-evidence-accumulation", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_Prior_amp", "3: prior-oscillation-only model", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_LLR_amp", "2: likelihood-oscillation-only model", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_one_amp", "Model X: Only one amplitude", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1" , "1: Bimodal inference", Optim_eval$type)
## summarize
Sum_AIC_Models <-   ddply(Optim_eval[Optim_eval$convcode == 0,],
.(species, type),
summarise,
median_error = median(value, na.rm = TRUE),
sum_error = sum(value, na.rm = TRUE),
k = mean(free_param),
AIC = 2*k + 2 * sum(value, na.rm = TRUE)
)
Sum_Subj_Model_AIC <-   ddply(Optim_eval[Optim_eval$convcode == 0,],
.(unique_id, type, species),
summarise,
median_error = median(value, na.rm = TRUE),
sum_error = sum(value, na.rm = TRUE),
k = mean(free_param),
AIC = 2*k + 2 * sum(value, na.rm = TRUE),
study_id = unique(study_id)
)
STAT.M1_M2 = summary(lmer(AIC ~ as.factor(type) + (1|study_id),
data = Sum_Subj_Model_AIC[(Sum_Subj_Model_AIC$type == "1: Bimodal inference" | Sum_Subj_Model_AIC$type == "2: likelihood-oscillation-only model") & Sum_Subj_Model_AIC$species == "humans", ]))
M_STAT.M1_M2 = t.test(Sum_Subj_Model_AIC[Sum_Subj_Model_AIC$type == "1: Bimodal inference" & Sum_Subj_Model_AIC$species == "mice", ]$AIC - Sum_Subj_Model_AIC[Sum_Subj_Model_AIC$type == "2: likelihood-oscillation-only model" & Sum_Subj_Model_AIC$species == "mice", ]$AIC)
print(Sum_AIC_Models)
save(Optim_eval,
Sum_AIC_Models,
Sum_Subj_Model_AIC,
STAT.M1_M2,
M_STAT.M1_M2,
file = "./Summary_Data/model_comparison.Rdata")
M_STAT.M1_M2
STAT.M1_M2
save(Optim_eval,
Sum_AIC_Models,
Sum_Subj_Model_AIC,
STAT.M1_M2,
M_STAT.M1_M2,
file = "./Summary_Data/model_comparison.Rdata")
if (!load_summary_data) {
## load human data
# Optim_eval = data.frame()
# human_files = list.files(path='./Results', pattern='Optim_eval_human_')
# for (load_idx in human_files){
# Optim_eval = rbind(Optim_eval, read.csv(paste("./Results/", load_idx, sep = "")))
# }
Optim_eval = read.csv("./Results/Optim_eval_human_complete.csv")
Optim_eval$species = "humans"
Optim_eval$unique_id = as.character(Optim_eval$subject_id * rand(1))
Optim_eval$study_id = NA
for (idx in unique(Optim_eval$subject_id)){
Optim_eval[Optim_eval$subject_id == idx,]$study_id =  Behav[Behav$subject_id == idx,]$study_id
}
## load mouse data
# Optim_eval_mice = data.frame()
# mice_files = list.files(path='./Results', pattern='Optim_eval_mouse_')
# for (load_idx in mice_files){
# Optim_eval_mice = rbind(Optim_eval_mice, read.csv(paste("./Results/", load_idx, sep = "")))
# }
Optim_eval_mice = read.csv("./Results/Optim_eval_mouse_complete.csv")
Optim_eval_mice$species = "mice"
Optim_eval_mice$unique_id = as.character(Optim_eval_mice$subject_id * Optim_eval_mice$session_id * rand(1))
Optim_eval_mice$study_id = NA
## group and rename
Optim_eval = rbind(Optim_eval[,c("value", "type", "free_param", "trial_n", "species", "convcode", "study_id", "unique_id")], Optim_eval_mice[,c("value", "type", "free_param", "trial_n", "species", "convcode", "study_id", "unique_id")])
Optim_eval$type = gsub("_mouse", "", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_no_integration", "5: no-evidence-accumulation", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_no_amp", "4: normative-evidence-accumulation", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_Prior_amp", "3: prior-oscillation-only model", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_LLR_amp", "2: likelihood-oscillation-only model", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1_one_amp", "Model X: Only one amplitude", Optim_eval$type)
Optim_eval$type = gsub("fit_glaze_osc_zeta_v1" , "1: Bimodal inference", Optim_eval$type)
## summarize
Sum_AIC_Models <-   ddply(Optim_eval[Optim_eval$convcode == 0,],
.(species, type),
summarise,
median_error = median(value, na.rm = TRUE),
sum_error = sum(value, na.rm = TRUE),
k = mean(free_param),
AIC = 2*k + 2 * sum(value, na.rm = TRUE)
)
Sum_Subj_Model_AIC <-   ddply(Optim_eval[Optim_eval$convcode == 0,],
.(unique_id, type, species),
summarise,
median_error = median(value, na.rm = TRUE),
sum_error = sum(value, na.rm = TRUE),
k = mean(free_param),
AIC = 2*k + 2 * sum(value, na.rm = TRUE),
study_id = unique(study_id)
)
STAT.M1_M2 = summary(lmer(AIC ~ as.factor(type) + (1|study_id),
data = Sum_Subj_Model_AIC[(Sum_Subj_Model_AIC$type == "1: Bimodal inference" | Sum_Subj_Model_AIC$type == "2: likelihood-oscillation-only model") & Sum_Subj_Model_AIC$species == "humans", ]))
M_STAT.M1_M2 = t.test(Sum_Subj_Model_AIC[Sum_Subj_Model_AIC$type == "1: Bimodal inference" & Sum_Subj_Model_AIC$species == "mice", ]$AIC - Sum_Subj_Model_AIC[Sum_Subj_Model_AIC$type == "2: likelihood-oscillation-only model" & Sum_Subj_Model_AIC$species == "mice", ]$AIC)
if (save_summary_data) {
save(Optim_eval,
Sum_AIC_Models,
Sum_Subj_Model_AIC,
STAT.M1_M2,
M_STAT.M1_M2,
file = "./Summary_Data/model_comparison.Rdata")
}
} else {
load("./Summary_Data/model_comparison.Rdata")
}
#print(Sum_AIC_Models)
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 25),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-10, max(Sum_Subj_Model_AIC$AIC)) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 25),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-10, 250) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 25),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-1, 250) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 10),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-1, 250) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 15),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-1, 250) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 20),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-1, 250) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
p_distribution_Sum_Subj_Model_AIC <-
ggplot(Sum_Subj_Model_AIC,
aes(
x = round_any(AIC, 17.5),
y = ..density..,
color = type,
fill = type
)) +
geom_histogram(position = "dodge", alpha = 0.5) +
theme_classic(base_size = 6) + xlim(-1, 250) +
labs(x = "AIC (subject-level)", y = "Density", color = "Model", fill = "Model", subtitle = "B") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "none") + facet_wrap( ~ species, ncol = 2)
p_distribution_Sum_Model_AIC <-
ggplot(Sum_AIC_Models[Sum_AIC_Models$type != "Model X: Only one amplitude", ],
aes(
y = type,
x = AIC,
color = type,
fill = type
)) +
geom_col(alpha = 0.5, width = 0.1) +
theme_classic(base_size = 6) +
scale_y_discrete(labels=c(" M1", " M2", " M3", " M4", " M5"))+
labs(x = "AIC (group-level)", y = "Model", color = "Model", fill = "Model", subtitle = "A") +
scale_color_brewer(palette = "Dark2", direction = +1) + scale_fill_brewer(palette = "Dark2", direction = +1) +
theme(legend.position = "top") + facet_wrap( ~ species, ncol = 2)
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
-STAT.M1_M2$coefficients
STAT.M1_M2
M_STAT.M1_M2
M_STAT.M1_M2$p.value
##
## Visualize alternating and repetitive biases
##
n_participants = 1000
if (run_visualize_alt_sim){
source("./Functions/visualize_rep_alt_sim_correction.R",
local = knitr::knit_global())
blocks = rep(c(0.9, 0.5), 10)
Rep_Sim = data.frame()
for (subj_idx in c(1:n_participants)) {
n_trials_per_block = round(runif(length(blocks), min = 15, max = 30))
add_Rep_Sim <- visualize_rep_alt_sim_correction(blocks, n_trials_per_block)
add_Rep_Sim$subj_idx = subj_idx
Rep_Sim = rbind(Rep_Sim, add_Rep_Sim)
}
Rep_Sim$corrected <- Rep_Sim$acf - Rep_Sim$random
Rep_Sim$type = "Attraction"
blocks = rep(c(0.1, 0.5), 10)
n_participants = 1000
Alt_Sim = data.frame()
for (subj_idx in c(1:n_participants)) {
n_trials_per_block = round(runif(length(blocks), min = 15, max = 30))
add_Alt_Sim <- visualize_rep_alt_sim_correction(blocks, n_trials_per_block)
add_Alt_Sim$subj_idx = subj_idx
Alt_Sim = rbind(Alt_Sim, add_Alt_Sim)
}
Alt_Sim$corrected <- Alt_Sim$acf - Alt_Sim$random
Alt_Sim$type = "Repulsion"
Rep_Alt_Sim = rbind(Rep_Sim, Alt_Sim)
Sum_Rep_Alt_Sim <-  ddply(
Rep_Alt_Sim,
.(trial, type),
summarise,
mean = mean(corrected, na.rm = TRUE),
error = sd(corrected, na.rm = TRUE) / sqrt(length(corrected))
)
Sum_Rep_Alt_Sim <- Sum_Rep_Alt_Sim[Sum_Rep_Alt_Sim$trial != 1,]
Sum_Rep_Alt_Sim$trial = Sum_Rep_Alt_Sim$trial-1
} else {Sum_Rep_Alt_Sim <- read.csv("./Results/Sum_Rep_Alt_Sim.csv")}
Sum_Rep_Alt_Sim$type = gsub("Attraction", "Repeating", Sum_Rep_Alt_Sim$type)
Sum_Rep_Alt_Sim$type = gsub("Repulsion", "Alternating", Sum_Rep_Alt_Sim$type)
p_Sum_Rep_Alt_Sim <- ggplot() +
geom_errorbar(
data = Sum_Rep_Alt_Sim,
aes(
x = trial,
ymin = mean - error,
ymax = mean + error,
color = type
),
width = 0.5,
alpha = 0.5,
size = 0.5,
) +
geom_line(
data = Sum_Rep_Alt_Sim,
aes(x = trial,
y = mean,
color = type),
linetype = "dotted"
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +
theme_classic(base_size = 6) + labs(
x = "Lag (Trials)",
y =
paste("Autocorrelation coefficient: History congruence"),
subtitle = NULL,
color = "Regime"
) + xlim(0, 25.5) + scale_color_brewer(palette = "Set1", direction = 1) + theme(legend.position = c(0.5, 0.9), legend.box = "horizontal") +  scale_x_continuous(
breaks = seq(1, 25, by = 4),
labels = seq(1, 25, by = 4),
limits = c(0, 25)
) #+ ylim(-0.01, 0.035)
p_Sum_Rep_Alt_Sim
