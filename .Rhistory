hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 2,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 1,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.9,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.01,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.02,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.01 ,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.02 & reproduce_Optim$p1 < 0.98,]$p1,100)
hist(reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.02 & reproduce_Optim$p1 < 0.98,]$p2,100)
reproduce_Optim = reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.02 & reproduce_Optim$p1 < 0.98,]
n_participants =  nrow(reproduce_Optim)
n_participants
Sim <- data.frame()
for (type_idx in c(1:length(type_list))){
reproduce_Optim  <- read.csv(paste("./Results/", type_list[type_idx], ".csv", sep = ""))
reproduce_Optim = reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.02 & reproduce_Optim$p1 < 0.98,]
n_participants =  nrow(reproduce_Optim)
n = runif(n_participants, 2000, 3000)
# outcomes
outcomes = c(0,1)
for (subj_idx in c(1:n_participants)){
if ((subj_idx %% 10) == 0){print(subj_idx)}
random_steps = rnorm(n = n[subj_idx], mean = 0, sd = 0)
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1") {
Sim_add <-
simulation_glaze_osc_human_zeta(
outcomes,
n[subj_idx],
reproduce_Optim$p1[subj_idx],
reproduce_Optim$p2[subj_idx],
reproduce_Optim$p3[subj_idx],
reproduce_Optim$p4[subj_idx],
reproduce_Optim$p5[subj_idx],
reproduce_Optim$p6[subj_idx],
1,
random_steps,
sliding_window,
n_permutations
)
}
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_LLR_amp") {
Sim_add <-
simulation_glaze_osc_human_zeta_LLR_amp(
outcomes,
n[subj_idx],
reproduce_Optim$p1[subj_idx],
reproduce_Optim$p2[subj_idx],
reproduce_Optim$p3[subj_idx],
reproduce_Optim$p4[subj_idx],
reproduce_Optim$p5[subj_idx],
1,
random_steps,
sliding_window,
n_permutations
)
}
Sim_add$diff_acf_Stimulus <- exclude_3SD(Sim_add$acf_Stimulus - Sim_add$random_acf_Stimulus)
Sim_add$diff_acf_History <- exclude_3SD(Sim_add$acf_History - Sim_add$random_acf_History)
Sim_add$subject_id = subj_idx
Sim_add$Trial = c(1:n[subj_idx])
Sim_add$H = reproduce_Optim$p1[subj_idx]
Sim_add$prec = reproduce_Optim$p2[subj_idx]
Sim_add$amp = reproduce_Optim$p3[subj_idx]
Sim_add$amp_LLR = reproduce_Optim$p4[subj_idx]
Sim_add$frequency = reproduce_Optim$p5[subj_idx]
Sim_add$phase =  reproduce_Optim$p6[subj_idx]
Sim_add$zeta =  reproduce_Optim$p7[subj_idx]
Sim_add$random_steps = random_steps
Sim_add$type = type_list[type_idx]
Sim = rbind(Sim, Sim_add)
}
}
Sim <- data.frame()
for (type_idx in c(1:length(type_list))){
reproduce_Optim  <- read.csv(paste("./Results/", type_list[type_idx], ".csv", sep = ""))
reproduce_Optim = reproduce_Optim[reproduce_Optim$convcode == 0 & reproduce_Optim$p1 > 0.02 & reproduce_Optim$p1 < 0.98,]
n_participants =  nrow(reproduce_Optim)
#n = runif(n_participants, 1000, 2000)
n = runif(n_participants, 250, 500)
# outcomes
outcomes = c(0,1)
for (subj_idx in c(1:n_participants)){
if ((subj_idx %% 10) == 0){print(subj_idx)}
random_steps = rnorm(n = n[subj_idx], mean = 0, sd = 0)
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1") {
Sim_add <-
simulation_glaze_osc_human_zeta(
outcomes,
n[subj_idx],
reproduce_Optim$p1[subj_idx],
reproduce_Optim$p2[subj_idx],
reproduce_Optim$p3[subj_idx],
reproduce_Optim$p4[subj_idx],
reproduce_Optim$p5[subj_idx],
reproduce_Optim$p6[subj_idx],
1,
random_steps,
sliding_window,
n_permutations
)
}
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_LLR_amp") {
Sim_add <-
simulation_glaze_osc_human_zeta_LLR_amp(
outcomes,
n[subj_idx],
reproduce_Optim$p1[subj_idx],
reproduce_Optim$p2[subj_idx],
reproduce_Optim$p3[subj_idx],
reproduce_Optim$p4[subj_idx],
reproduce_Optim$p5[subj_idx],
1,
random_steps,
sliding_window,
n_permutations
)
}
Sim_add$diff_acf_Stimulus <- exclude_3SD(Sim_add$acf_Stimulus - Sim_add$random_acf_Stimulus)
Sim_add$diff_acf_History <- exclude_3SD(Sim_add$acf_History - Sim_add$random_acf_History)
Sim_add$subject_id = subj_idx
Sim_add$Trial = c(1:n[subj_idx])
Sim_add$H = reproduce_Optim$p1[subj_idx]
Sim_add$prec = reproduce_Optim$p2[subj_idx]
Sim_add$amp = reproduce_Optim$p3[subj_idx]
Sim_add$amp_LLR = reproduce_Optim$p4[subj_idx]
Sim_add$frequency = reproduce_Optim$p5[subj_idx]
Sim_add$phase =  reproduce_Optim$p6[subj_idx]
Sim_add$zeta =  reproduce_Optim$p7[subj_idx]
Sim_add$random_steps = random_steps
Sim_add$type = type_list[type_idx]
Sim = rbind(Sim, Sim_add)
}
}
## compute summary of simulated behavior
Sim_Behav <-
ddply(
Sim,
.(subject_id,type),
summarise,
History = sum(History, na.rm = TRUE)/length(History)*100,
Min_History = min(History_slider, na.rm = TRUE)*100,
Max_History = max(History_slider, na.rm = TRUE)*100,
Accuracy = sum(Accuracy, na.rm = TRUE)/length(Accuracy)*100,
Min_Accuracy = min(Accuracy_slider, na.rm = TRUE)*100,
Max_Accuracy = max(Accuracy_slider, na.rm = TRUE)*100
)
Sim_Behav_diff <-
ddply(
Sim[!is.na(Sim$Accuracy),],
.(subject_id, Accuracy),
summarise,
History = sum(History, na.rm = TRUE)/length(History)*100
)
Sim_Behav$null_History = Sim_Behav$History - 50
Sim_STAT.Global_History_Accuracy = t.test(Sim_Behav$null_History)
compare_participants = which(Sim_Behav_diff[Sim_Behav_diff$Accuracy == 1,]$subject_id %in% Sim_Behav_diff[Sim_Behav_diff$Accuracy == 0,]$subject_id)
Sim_STAT.diff_History_Accuracy = t.test(Sim_Behav_diff[Sim_Behav_diff$Accuracy == 0 & Sim_Behav_diff$subject_id %in% compare_participants,]$History, Sim_Behav_diff[Sim_Behav_diff$Accuracy == 1 & Sim_Behav_diff$subject_id %in% compare_participants,]$History, paired = TRUE)
## compute_Summary_acf
source("./Functions/f_compute_sim_group_acf.R", local = knitr::knit_global())
acf_to_test = c('diff_acf_Stimulus', 'diff_acf_History')
max_trial = 99
Sim_Summary_acf <- f_compute_sim_group_acf(Sim, acf_to_test, max_trial, type_list)
Sim_Summary_acf$Trial <- Sim_Summary_acf$Trial - 1
ID_Sim_Summary_acf <- ddply(
Sim,
.(subject_id,type),
summarise,
lag_significant_Stimulus = min(which(diff(which(c(0, exceed_acf_Stimulus,0) < n_permutations/2)) != 1)) - 1,
lag_significant_History = min(which(diff(which(c(0, exceed_acf_History,0) < n_permutations/2)) != 1)) - 1
)
ID_Sim_Summary_acf$lag_significant_Stimulus[ID_Sim_Summary_acf$lag_significant_Stimulus == Inf] = NA
ID_Sim_Summary_acf$lag_significant_History[ID_Sim_Summary_acf$lag_significant_History == Inf] = NA
##
## Autocorrelations decay over time
##
Sim$min_diff_acf_Stimulus = Sim$diff_acf_Stimulus - min(Sim$diff_acf_Stimulus, na.rm = TRUE)
Sim$min_diff_acf_History = Sim$diff_acf_History - min(Sim$diff_acf_History, na.rm = TRUE)
Sim_lmer_acf_Stimulus <- lmer(log(min_diff_acf_Stimulus) ~ Trial + (1|subject_id), data = Sim[Sim$Trial > 1 & Sim$Trial < 21 & Sim$min_diff_acf_Stimulus > 0,])
Sim_STAT.lmer_acf_Stimulus <- summary(Sim_lmer_acf_Stimulus)
Sim_lmer_acf_History <- lmer(log(min_diff_acf_History) ~ Trial + (1|subject_id), data = Sim[Sim$Trial > 1 & Sim$Trial < 21 & Sim$min_diff_acf_History > 0,])
Sim_STAT.lmer_acf_History <- summary(Sim_lmer_acf_History)
source("./Functions/f_compute_power_spectra.R", local = knitr::knit_global())
sliders = c("Accuracy_slider", "History_slider")
Sim_Power_Spectra <- f_compute_power_spectra(Sim, sliders)
Sim_Power_Spectra$r_freq = round(Sim_Power_Spectra$freq, digits = 4)
step_size = 0.01
bins <- seq(from = min(Sim_Power_Spectra$freq), to = max(Sim_Power_Spectra$freq), by = step_size)
names <- round(bins, digits = 2)
names = names[1:length(names) - 1]
Sim_Power_Spectra$bin_freq <- cut(Sim_Power_Spectra$freq, breaks = bins, labels = names)
Sim_Power_Spectra$bin_freq <- as.numeric(Sim_Power_Spectra$bin_freq) * step_size
Sim_Power_Spectra$bin_freq[is.na(Sim_Power_Spectra$bin_freq)] = max(Sim_Power_Spectra$freq)
Sim_Power_Spectra$Coherence <- Sim_Power_Spectra$Coherence * 100
gathercol = colnames(Sim_Power_Spectra[, c(2,3)])
Sim_Power_Spectra_long  <-
gather(Sim_Power_Spectra[, c(1,2,3, 6,7,8)],
"Variable",
"Power",
gathercol,
factor_key = TRUE)
Sim_Power_Frequency <-  ddply(
Sim_Power_Spectra_long,
.(r_freq, Variable),
summarise,
mean_power = mean(exclude_3SD((Power)), na.rm = TRUE),
ci_power = qnorm(0.975) * sd(exclude_3SD(Power), na.rm = TRUE)/sqrt(length(exclude_3SD(Power)))
)
Sim_Coherence_Phase_Frequency <- ddply(
Sim_Power_Spectra,
.(bin_freq),
summarise,
mean_coherence = mean(exclude_3SD((Coherence)), na.rm = TRUE),
ci_coherence = qnorm(0.975) * sd(exclude_3SD(Coherence), na.rm = TRUE)/sqrt(length(exclude_3SD(Coherence))),
mode_phase = getmode(exclude_3SD((abs(Phase)))),
mean_phase = getmode(exclude_3SD((abs(Phase)))),
ci_phase = qnorm(0.975) * sd(exclude_3SD(abs(Phase)), na.rm = TRUE)/sqrt(length(exclude_3SD(Phase)))
)
##
## mode of coherence and phase
##
Sim_Summary_Power_Spectra <-
ddply(
Sim_Power_Spectra[Sim_Power_Spectra$freq > 0.01 & Sim_Power_Spectra$freq < 0.1,],
.(subject_id),
summarise,
mean_coherence = mean(exclude_3SD((
Coherence))),
mode_phase = getmode(exclude_3SD((
abs(Phase))))
)
##
## STATS Power vs Frequency (1/f noise)
##
Sim_lmer_power_freq_Stimulus <- lmer(log(Power_Stimulus) ~ log(freq) + (1|subject_id), data = Sim_Power_Spectra[Sim_Power_Spectra$freq > 0.01 & Sim_Power_Spectra$freq < 0.1 & is.finite(log(Sim_Power_Spectra$Power_Stimulus)),])
Sim_STAT.lmer_power_freq_Stimulus <- summary(Sim_lmer_power_freq_Stimulus)
Sim_lmer_power_freq_History <- lmer(log(Power_History) ~ log(freq) + (1|subject_id), data = Sim_Power_Spectra[Sim_Power_Spectra$freq > 0.01 & Sim_Power_Spectra$freq < 0.1 & is.finite(log(Sim_Power_Spectra$Power_History)),])
Sim_STAT.lmer_power_freq_History <- summary(Sim_lmer_power_freq_History)
##
## Simulated modes
##
Sim_Mode_gather <-  ddply(
Sim,
.(subject_id),
summarise,
directed_mode = round((round(Accuracy_slider, digits = 1) - round(History_slider, digits = 1))*100, digits = 0),
scaled_directed_mode = scale(directed_mode),
strength_mode = abs(scaled_directed_mode)
)
Sim$directed_mode = Sim_Mode_gather$directed_mode
Sim$scaled_directed_mode = Sim_Mode_gather$scaled_directed_mode
Sim$strength_mode = Sim_Mode_gather$strength_mode
Sim_ID_mode <-  ddply(
Sim,
.(subject_id),
summarise,
strength_mode = mean(strength_mode, na.rm = TRUE),
directed_mode = mean(directed_mode, na.rm = TRUE)
)
##
## Simulated confidence
##
Sim$Confidence <- abs(Sim$mu)
Sim$scaled_Confidence <- scale(Sim$Confidence)
Sim$clear_Confidence <- Sim$Confidence
Sim[Sim$clear_Confidence > median(Sim$clear_Confidence, na.rm = TRUE) + 3*median(Sim$clear_Confidence, na.rm = TRUE),]$clear_Confidence <- NA
Sim_Post_Perceptual_Modes = ddply(
Sim[!is.na(Sim$History) & !is.na(Sim$Accuracy) & !is.na(Sim$clear_Confidence),],
.(directed_mode),
summarise,
average_Confidence = mean(clear_Confidence, na.rm = TRUE),
se_Confidence = sd(clear_Confidence, na.rm = TRUE)/sqrt(length(clear_Confidence)),
n = length(mu),
n_percent = (sum(!is.na(mu))/nrow(Sim))*100
)
Sim_slider_History_vs_Accuracy <- lmer(History_slider ~ Accuracy_slider + (1|subject_id), data = Sim)
Sim_STAT.slider_History_vs_Accuracy <- summary(Sim_slider_History_vs_Accuracy)
##
## Confidence vs mode: Prepare plot and stats
##
Sim_Confidence_Behav <-
ddply(
Sim[!is.na(Sim$History) & !is.na(Sim$Accuracy) & !is.na(Sim$clear_Confidence),],
.(subject_id),
summarise,
diff_Confidence_History = mean(clear_Confidence[History == 1], na.rm = TRUE) -  mean(clear_Confidence[History == 0], na.rm = TRUE),
diff_Confidence_Stimulus = mean(clear_Confidence[Accuracy == 1], na.rm = TRUE) -  mean(clear_Confidence[Accuracy == 0], na.rm = TRUE)
)
gathercol = colnames(Sim_Confidence_Behav[, c(2,3)])
Sim_Confidence_Behav_long  <-
gather(Sim_Confidence_Behav[,c(1,2,3)],
"Variable",
"diff",
gathercol,
factor_key = TRUE)
Sim_Confidence_Behav_long$Variable <-
gsub("diff_Confidence_History", "History", Sim_Confidence_Behav_long$Variable)
Sim_Confidence_Behav_long$Variable <-
gsub("diff_Confidence_Stimulus", "Stimulus", Sim_Confidence_Behav_long$Variable)
Sim_diff_Confidence <- lmer(diff ~ Variable + (1|subject_id), data = Sim_Confidence_Behav_long)
Sim_STAT.diff_Confidence <- summary(Sim_diff_Confidence)
## exclude low performance mice
Summary_Sim_Confidence_Behav <-
ddply(
Sim_Confidence_Behav_long,
.(Variable),
summarise,
Mean = mean(diff, na.rm = TRUE),
Error = sd(diff, na.rm = TRUE)/sqrt(length(diff)))
Sim_lmer_Confidence_Accuracy_History <- lmer(clear_Confidence ~ Accuracy + History + (1|subject_id), data = Sim)
Sim_STAT.lmer_Confidence_Accuracy_History <- summary(Sim_lmer_Confidence_Accuracy_History)
##
## Confidence vs. mode
##
Sim_Confidence_vs_mode <- lmer(clear_Confidence ~ poly(directed_mode, 2) + (1|subject_id), data = Sim)
Sim_STAT.Confidence_vs_mode <- summary(Sim_Confidence_vs_mode)
gathercol <- colnames(Sim_Behav[,c(3,6)])
Sim_Behav_long  <-
gather(Sim_Behav[, c(1,2,3,6)],
"Variable",
"Frequency",
gathercol,
factor_key = TRUE)
Sim_Behav_long$Frequency <-
gsub("Accuracy", "Stimulus", Sim_Behav_long$Frequency)
sim_p_distribution_Behav <- ggplot(Sim_Behav_long, aes(x = as.numeric(Frequency), color = Variable, fill = Variable)) +
geom_density(colour = "white", alpha=.4, bw = 0.75, size = 0.5) +
theme_classic(base_size = 6) +  xlim(25 , 100) + labs(x = "Frequency (%)",  y = "Density", subtitle = "A") +
scale_color_brewer(palette = "Set1", direction = -1) + scale_fill_brewer(palette = "Set1", direction = -1) +
geom_vline(
xintercept = 50,
linetype = "dashed",
color = "black",
size = 0.25
) + theme(legend.position = "none")
##
## Probability of History-congruence depending on perceptual accuracy
##
gathercol <- colnames(Sim_Behav_diff[3])
Sim_Behav_diff_long  <-
gather(Sim_Behav_diff,
"Variable",
"Frequency",
gathercol,
factor_key = TRUE)
Sim_Behav_diff_long$Accuracy <- as.character(Sim_Behav_diff_long$Accuracy)
Sim_Behav_diff_long$Accuracy <-
gsub("0", "error", Sim_Behav_diff_long$Accuracy)
Sim_Behav_diff_long$Accuracy <-
gsub("1", "correct", Sim_Behav_diff_long$Accuracy)
sim_p_distribution_Behav_diff <- ggplot(Sim_Behav_diff_long, aes(x = Frequency, color = -Accuracy, fill = Accuracy)) +
# geom_histogram(aes(y=..density..), colour="white", fill="black", position="identity", binwidth = 0.25, bins = 100, alpha = 0.3) +
geom_density(colour = "white", alpha=.4, bw = 0.75, size = 0.5) +
theme_classic(base_size = 6) +  xlim(25 , 100) + labs(x = "Frequency of History-congruence (%)",  y = "Density", subtitle = NULL, fill = "") +
scale_color_brewer(palette = "Set1", direction = -1) + scale_fill_manual(values = c("#4292C6", "#084594")) +
geom_vline(
xintercept = 50,
linetype = "dashed",
color = "black",
size = 0.25
) + theme(legend.position = "bottom")
##
## Acf Plot
##
Plot_Acf_Data =  Sim_Summary_acf[(Sim_Summary_acf$Variable == "diff_acf_Stimulus" | Sim_Summary_acf$Variable == "diff_acf_History") ,]
Plot_Acf_Data$Variable <- gsub("diff_acf_Stimulus", "Stimulus", Plot_Acf_Data$Variable)
Plot_Acf_Data$Variable <- gsub("diff_acf_History", "History", Plot_Acf_Data$Variable)
y_min = -0.002
sim_p_acf <- ggplot() +
geom_point(data = Plot_Acf_Data,
aes(
x = Trial,
y = Mean,
fill = Variable,
color = Variable),
alpha = 0.8,
size = 1,
fill = "white",
position = position_dodge(width = 0.5)
) +  geom_point(data = Plot_Acf_Data[Plot_Acf_Data$p == "< 0.05",],
aes(
x = Trial,
y = y_min,
fill = Variable,
color = Variable),
alpha = 0.8,
size = 0.1,
fill = "white",
position = position_dodge(width = 0.5)
) +
geom_errorbar(data = Plot_Acf_Data,
aes(
x = Trial,
ymin = Mean - Error,
ymax = Mean + Error,
fill = Variable,
color = Variable), position = position_dodge(width = 0.5), width = 0.5, alpha = 0.5, size = 0.5) + geom_line(data = Plot_Acf_Data,
aes(
x = Trial,
y = Mean,
fill = Variable,
color = Variable), position = position_dodge(width = 0.5), linetype = "dotted") +
geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +
theme_classic(base_size = 6) + labs(x = "Lag (Trials)",  y =
paste("Autocorrelation coefficient"), subtitle = "B", color = "Congruence to", shape = "p value") + xlim(0, 25.5) + scale_color_brewer(palette = "Set1", direction = -1) + theme(legend.position = c(0.8, 0.9), legend.box = "horizontal") +  scale_x_continuous(breaks = seq(1,25,by = 4), labels = seq(1,25,by = 4), limits=c(0, 25)) #+ ylim(-0.004, 0.03)
##
## Exceed Plot
##
gathercol <- colnames(ID_Sim_Summary_acf[,c(3,4)])
ID_Sim_Summary_acf_long  <-
gather(ID_Sim_Summary_acf,
"Variable",
"Lag",
gathercol,
factor_key = TRUE)
sim_p_exceed_acf <- ggplot(ID_Sim_Summary_acf_long, aes(x = Lag, fill = Variable)) +
geom_histogram(aes(y=..density..), color = "white", position="identity", binwidth = 1, bins = 100, alpha = 0.4, size = 0.5) +
#geom_density(alpha=.4, color = "white", bw = 1) +
theme_classic(base_size = 6) +  xlim(-1 ,12) + labs(x = "Positive autocorrelation (Trials)",  y = "Density", subtitle = "C") +
scale_color_brewer(palette = "Set1") + scale_fill_brewer(palette = "Set1")  + theme(legend.position = "none") + scale_x_continuous(breaks = seq(0,10,by=1), limits=c(-1, 11)) + facet_wrap(~Variable, nrow = 2) + theme(strip.background = element_blank(), strip.text = element_blank())
##
## Power Spectra
##
Sim_p_power_frequency <-
ggplot(data = Sim_Power_Frequency[Sim_Power_Frequency$r_freq > 0.01 & Sim_Power_Frequency$r_freq < 0.09,],
mapping = aes(x = (r_freq), y = (mean_power), ymin = (mean_power - ci_power), ymax = (mean_power - ci_power), color = Variable, group = Variable, fill = Variable)) +
geom_point(size = 0.5, alpha = 0.1) +
theme_classic(base_size = 6) +
theme(legend.position = "none") + stat_smooth(position = "identity", method = "loess", se = TRUE, n = 180, fullrange = TRUE,
level = 0.95, na.rm = TRUE, alpha = 0.2, size = 0.15) + xlim(0.01, 0.09) + ylim(0, 0.2) + scale_color_brewer(palette = "Set1", direction = 1) + scale_fill_brewer(palette = "Set1", direction = 1) +  labs(x = "Frequency",  y = "Spectral Density", subtitle = "D")
Sim_p_density_phase <-
ggplot(Sim_Power_Spectra[Sim_Power_Spectra$r_freq > 0.01 & Sim_Power_Spectra$r_freq < 0.09,], aes(
x = abs(Phase)
))  + geom_density(alpha=.2, color = "white", fill="darkorchid4", bw = 0.01) + labs(x = "Phase",  y =
"Density", subtitle = "E") + theme_classic(base_size = 6) + theme(legend.position =
"none") +
geom_vline(xintercept = pi, linetype = "dashed",
color = "black",
size = 0.25) #+ xlim(-0.2, 3.4)
Sim_p_density_coherence <-
ggplot(Sim_Power_Spectra[Sim_Power_Spectra$bin_freq < 0.09,], aes(
x = Coherence
))  + geom_density(alpha=.2, color = "white", fill="darkorchid4", bw = 0.01) + labs(x = "Squared coherence (%)",  y =
"Density", subtitle = "F") + theme_classic(base_size = 6) + theme(legend.position =
"none") + geom_vline(xintercept = mean(Sim_Power_Spectra[Sim_Power_Frequency$r_freq > 0.01 & Sim_Power_Frequency$r_freq < 0.1,]$Coherence, na.rm = TRUE), linetype = "dashed",
color = "black",
size = 0.25) + xlim(-1, 26)
sim_p_Confidence_mode <- ggplot(data = Sim_Post_Perceptual_Modes[Sim_Post_Perceptual_Modes$n_percent > 0.5,], aes(
x = directed_mode,
y = average_Confidence,
ymin = average_Confidence - se_Confidence,
ymax = average_Confidence + se_Confidence)) +
geom_point(
alpha = 0.5,
size = 0.1,
fill = "darkorchid4",
position = position_dodge(width = 0)
) +
geom_errorbar(
width = 5, alpha = 0.5, size = 0.5, color = "darkorchid4") +
geom_line(linetype = "dotted", color = "darkorchid4") +
theme_classic(base_size = 6) +
labs(x = "Int.< Mode (%) > Ext.",  y =
"Simulated posterior certainty", subtitle = "H")  + scale_color_brewer(palette = "Set1", direction = -1) + theme(legend.position = "none") +  scale_x_continuous(breaks = seq(-100,100,by = 20), labels = seq(-100,100,by = 20), limits=c(-100, 100)) + stat_smooth(position = "identity", method = "loess", se = TRUE, n = 180, fullrange = TRUE,
level = 0.95, na.rm = TRUE, alpha = 0.2, size = 0.1, color = "darkorchid4", fill = "darkorchid4", linetype = "dashed") +
geom_hline(
yintercept = min(Sim_Post_Perceptual_Modes[Sim_Post_Perceptual_Modes$n_percent > 0,]$average_Confidence),
linetype = "dashed",
color = "black",
size = 0.25
) +
geom_vline(
xintercept = Sim_Post_Perceptual_Modes[Sim_Post_Perceptual_Modes$n_percent > 0 & Sim_Post_Perceptual_Modes$average_Confidence == min(Sim_Post_Perceptual_Modes[Sim_Post_Perceptual_Modes$n_percent > 0,]$average_Confidence),]$directed_mode,
linetype = "dashed",
color = "black",
size = 0.25
)
sim_p_Confidence <- ggplot() +
geom_point(data = Sim_Confidence_Behav_long,
aes(
x = Variable,
y = diff,
color = Variable),
alpha = 0.01,
size = 0.01,
fill = "white",
position = position_jitter(width = 0.1)
)  +
geom_errorbar(data = Summary_Sim_Confidence_Behav,
aes(
x = Variable,
ymin = Mean - Error,
ymax = Mean + Error,
color = Variable), position = position_dodge(width = 0.5), width = 0.125, alpha = 0.8, size = 0.5) +
theme_classic(base_size = 6) + labs(x = "Congruency",  y = "diff posterior certainty (zscore)", subtitle = "G") + scale_color_brewer(palette = "Set1", direction = -1) +   geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +  theme(legend.position = "none") + ylim(-0.1, 0.25)
lay <- rbind(c(1,2,2,3), c(8,2,2,3), c(4,5, 9,7), c(4,6,9,7))
grid.arrange(
sim_p_distribution_Behav, sim_p_acf, sim_p_exceed_acf,
Sim_p_power_frequency, Sim_p_density_phase, Sim_p_density_coherence,
sim_p_Confidence_mode, sim_p_distribution_Behav_diff, sim_p_Confidence,
layout_matrix = lay,
heights = c(0.5, 0.5, 0.4,0.4),
widths = c(0.3,0.2, 0.225,0.3))
