library(tidyr)
library(plyr)
library(e1071)
library(readxl)
# red: "#E41A1C"
# blue: "#377EB8"
# green: "#66C2A5"
# orange:  "#FC8D62"
# library("RColorBrewer")
#   display.brewer.pal(n = 8, name = 'Set2')
#   brewer.pal(n = 8, name = 'Set2')
source("./Functions/helper_functions.R", local = knitr::knit_global())
load_mouse_data = TRUE
if (!load_summary_data) {
if (preprocess_mouse_data) {
loc = paste(root, "/Mouse/export_dataframe.csv", sep = "")
n_permutations = 100
source("./Functions/f_preprocess_mouse_data.R",
local = knitr::knit_global())
MwData <- f_preprocess_mouse_data(loc, n_permutations)
}
##
## Dynamic probability of stimulus- and history-congruence
##
if (compute_slider_mouse_data) {
source("./Functions/f_compute_slider.R", local = knitr::knit_global())
for (subj_idx in unique(MwData$subject_id)) {
print(subj_idx)
for (session_idx in unique(MwData$subject_id)) {
index = (MwData$subject_id == subj_idx & MwData$session_id == session_idx)
MwData$History_slider[index] <- f_compute_slider(MwData$History[index], sliding_window)
MwData$Accuracy_slider[index] <- f_compute_slider(MwData$Accuracy[index], sliding_window)
MwData$RT_slider[index] <- f_compute_slider(MwData$RT[index], sliding_window)
}
}
}
##
## Prepare diagnostics for exclusion criteria
##
if (filter_mouse_data){
MwData$keep = NA
for (subject_idx in unique(MwData$subject_id)) {
print(subject_idx)
for (session_idx in unique(MwData[MwData$subject_id == subject_idx,]$session_id)) {
print(session_idx)
M_Behav_excl <- data.frame()
M_Behav_excl <-
ddply(
MwData[MwData$subject_id == subject_idx & MwData$session_id == session_idx,],
.(Difficulty),
summarise,
History = mean(History, na.rm = TRUE)*100,
Accuracy = mean(Accuracy, na.rm = TRUE)*100,
median_RT = median(RT, na.rm = TRUE)
)
if (max(M_Behav_excl[M_Behav_excl$Difficulty >= 0.5,]$Accuracy, na.rm = TRUE) > 80){
MwData[MwData$subject_id == subject_idx & MwData$session_id == session_idx,]$keep = 1
} else {
MwData[MwData$subject_id == subject_idx & MwData$session_id == session_idx,]$keep = 0
}
}
}
}
## load fully preprocessed data
if (load_mouse_data){
#MwData <- read.csv(paste(root, "/Mouse/balanced_MwData_slider.csv", sep = ""))
MwData <- read.csv(paste(root, "/Mouse/MwData_new_preproc_filter_slider_excl.csv", sep = ""))
}
##
## Apply exlcusion criteria
##
if (apply_mouse_exclusion_criteria){
MwData <- MwData[MwData$keep == 1,]
M_Behav_excl <-
ddply(
MwData,
.(subject_id, session_id),
summarise,
Stimulus_History = mean(Stimulus_History, na.rm = TRUE)*100,
History = mean(History, na.rm = TRUE)*100,
Accuracy = mean(Accuracy, na.rm = TRUE)*100,
Imbalance = mean(abs(0.5-prob_left), na.rm = TRUE)*100 + 50,
RT = mean(RT, na.rm = TRUE)
)
data_select = M_Behav_excl[M_Behav_excl$Imbalance<60,c(1,2)]
sMwData = data.frame()
for (subj_idx in unique(data_select$subject_id)){
print(subj_idx)
row_select = double()
row_select = (MwData$subject_id == subj_idx & MwData$session_id %in% data_select[data_select$subject_id == subj_idx,]$session_id)
sMwData <- rbind(sMwData, MwData[which(row_select),])
}
MwData <- sMwData
}
MwData$clear_RT = MwData$RT
MwData$scaled_RT = scale(MwData$clear_RT)
MwData$clear_RT[MwData$clear_RT > median(MwData$clear_RT, na.rm = TRUE) + 3*median(MwData$clear_RT, na.rm =TRUE)] = NA
MwData$clear_RT2 = MwData$RT
MwData$clear_RT2[MwData$clear_RT2 > median(MwData$clear_RT2, na.rm = TRUE) + 1.5*median(MwData$clear_RT2, na.rm =TRUE)] = NA
##
## compute weighted stimulus
##
MwData$w_Stimulus = 0.5 + (MwData$Stimulus-0.5)*MwData$Difficulty
##
## go to milliseconds
##
MwData$clear_RT <- MwData$clear_RT*1000
MwData$clear_RT2 <- MwData$clear_RT2*1000
n_trials_mice = nrow(MwData)
n_participants_mice = length(unique(MwData$subject_id))
if (save_summary_data) {
save(n_trials_mice, n_participants_mice,
file = "./Summary_Data/size_IBL_dataset.Rdata")
}
} else {
load("./Summary_Data/size_IBL_dataset.Rdata")
}
if (!load_summary_data) {
M_Behav <-
ddply(
MwData,
.(subject_id),
summarise,
Stimulus_History = mean(Stimulus_History, na.rm = TRUE)*100,
History = mean(History, na.rm = TRUE)*100,
Accuracy = mean(Accuracy, na.rm = TRUE)*100,
Bias = abs(0.5 - sum(Response == max(Response), na.rm = TRUE)/length(Response))*100 + 50
)
M_Behav$null_History = M_Behav$History - 50
M_STAT.Global_History_Accuracy = t.test(M_Behav$null_History)
MwData[(is.na(MwData$Stimulus)), c("Accuracy", "History", "History_slider", "Accuracy_slider")] = NA
##
## History effects global
##
gathercol = colnames(M_Behav[, c(3,4)])
M_Behav_long  <-
gather(M_Behav,
"Variable",
"Frequency",
gathercol,
factor_key = TRUE)
M_Behav_diff <-
ddply(
MwData[!is.na(MwData$Accuracy),],
.(subject_id, Accuracy),
summarise,
History = mean(History, na.rm = TRUE)*100
)
gathercol <- colnames(M_Behav_diff[,c(3)])
M_Behav_diff_long  <-
gather(M_Behav_diff[, c(1,2,3)],
"Variable",
"Frequency",
gathercol,
factor_key = TRUE)
M_Behav_diff_long$Accuracy <- as.character(M_Behav_diff_long$Accuracy)
M_Behav_diff_long$Accuracy <-
gsub("0", "error", M_Behav_diff_long$Accuracy)
M_Behav_diff_long$Accuracy <-
gsub("1", "correct", M_Behav_diff_long$Accuracy)
M_STAT.diff_History_Accuracy = t.test(M_Behav_diff[M_Behav_diff$Accuracy == 0,]$History, M_Behav_diff[M_Behav_diff$Accuracy == 1,]$History, paired = TRUE)
if (save_summary_data) {
save(M_Behav,
M_STAT.Global_History_Accuracy,
M_Behav_long,
M_Behav_diff,
M_Behav_diff_long,
M_STAT.diff_History_Accuracy,
file = "./Summary_Data/Summary_Behavior_IBL.Rdata")
}
} else {
load("./Summary_Data/Summary_Behavior_IBL.Rdata")
}
library(svMisc)
type_list = c(
"fit_glaze_osc_zeta_v1_mouse",
"fit_glaze_osc_zeta_v1_one_amp_mouse",
"fit_glaze_osc_zeta_v1_LLR_amp_mouse",
"fit_glaze_osc_zeta_v1_Prior_amp_mouse",
"fit_glaze_osc_zeta_v1_no_amp_mouse",
"fit_glaze_osc_zeta_v1_no_integration_mouse"
)
eval_list = c(
"eval_glaze_osc_zeta_v1_mouse",
"eval_glaze_osc_zeta_v1_one_amp_mouse",
"eval_glaze_osc_zeta_v1_LLR_amp_mouse",
"eval_glaze_osc_zeta_v1_Prior_amp_mouse"
)
# available models
source("./Functions/eval_glaze_osc_zeta_v1_mouse.R",
local = knitr::knit_global())
source("./Functions/eval_glaze_osc_zeta_v1_one_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/eval_glaze_osc_zeta_v1_LLR_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/eval_glaze_osc_zeta_v1_Prior_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_one_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_LLR_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_Prior_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_no_amp_mouse.R",
local = knitr::knit_global())
source(
"./Functions/fit_glaze_osc_zeta_v1_no_integration_mouse.R",
local = knitr::knit_global()
)
Optim_eval = data.frame()
for (id in unique(MwData$subject_id)) {
print(paste("mouse:", id, sep = " "))
for (session_id in unique(MwData[MwData$subject_id == id, ]$session_id)) {
print(paste("session:", session_id, sep = " "))
Input_Data = MwData[MwData$subject_id == id &
MwData$session_id == session_id, c("Stimulus", "Response", "Difficulty")]
Input_Data$Stimulus <-
(Input_Data$Stimulus * 2 - 1) * Input_Data$Difficulty
Input_Data$Stimulus[Input_Data$Difficulty == 0] = 0
Input_Data = Input_Data[!is.na(Input_Data$Stimulus) &
!is.na(Input_Data$Response), ]
for (type_idx in c(1:length(type_list))) {
load_M_Optim <-
read.csv(paste("./Results/", type_list[type_idx], ".csv", sep = ""))
print(type_list[type_idx])
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:7])
par = param[6]
lower = 0
upper = 2 * pi
} else  if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_one_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_LLR_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_Prior_amp_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:6])
par = param[5]
lower = 0
upper = 2 * pi
} else if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_no_amp_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:3])
} else if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_no_integration_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:2])
}
log_evidence = c()
for (trial_idx in seq(
from = 1,
to = nrow(Input_Data) - 2 * sliding_window + 1,
by = sliding_window
)) {
train =  Input_Data[seq(from = trial_idx,
to = trial_idx + sliding_window - 1,
by = 1), ]
test = Input_Data[seq(
from = trial_idx + sliding_window,
to = trial_idx + 2 * sliding_window - 1,
by = 1
), ]
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_one_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_LLR_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_Prior_amp_mouse") {
train_O =  optimx(
par,
match.fun(eval_list[type_idx]),
Input_Data = train,
param = param,
lower = lower,
upper = upper
)
log_evidence = c(log_evidence,
-match.fun(eval_list[type_idx])(train_O$p1, test, param))
} else {
log_evidence = c(log_evidence, -match.fun(type_list[type_idx])(param, test))
}
}
add_Optim_eval = data.frame(
subject_id = id,
session_id = session_id,
LL = mean(log_evidence, na.rm = TRUE),
N = nrow(Input_Data),
type = type_list[type_idx]
)
Optim_eval = rbind(Optim_eval, add_Optim_eval)
write.csv(Optim_eval, "./Results/interim_eval.csv")
}
}
}
setwd("C:/Users/Veith Weilnhammer/Github/Modes")
library(svMisc)
type_list = c(
"fit_glaze_osc_zeta_v1_mouse",
"fit_glaze_osc_zeta_v1_one_amp_mouse",
"fit_glaze_osc_zeta_v1_LLR_amp_mouse",
"fit_glaze_osc_zeta_v1_Prior_amp_mouse",
"fit_glaze_osc_zeta_v1_no_amp_mouse",
"fit_glaze_osc_zeta_v1_no_integration_mouse"
)
eval_list = c(
"eval_glaze_osc_zeta_v1_mouse",
"eval_glaze_osc_zeta_v1_one_amp_mouse",
"eval_glaze_osc_zeta_v1_LLR_amp_mouse",
"eval_glaze_osc_zeta_v1_Prior_amp_mouse"
)
# available models
source("./Functions/eval_glaze_osc_zeta_v1_mouse.R",
local = knitr::knit_global())
source("./Functions/eval_glaze_osc_zeta_v1_one_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/eval_glaze_osc_zeta_v1_LLR_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/eval_glaze_osc_zeta_v1_Prior_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_one_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_LLR_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_Prior_amp_mouse.R",
local = knitr::knit_global())
source("./Functions/fit_glaze_osc_zeta_v1_no_amp_mouse.R",
local = knitr::knit_global())
source(
"./Functions/fit_glaze_osc_zeta_v1_no_integration_mouse.R",
local = knitr::knit_global()
)
Optim_eval = data.frame()
for (id in unique(MwData$subject_id)) {
print(paste("mouse:", id, sep = " "))
for (session_id in unique(MwData[MwData$subject_id == id, ]$session_id)) {
print(paste("session:", session_id, sep = " "))
Input_Data = MwData[MwData$subject_id == id &
MwData$session_id == session_id, c("Stimulus", "Response", "Difficulty")]
Input_Data$Stimulus <-
(Input_Data$Stimulus * 2 - 1) * Input_Data$Difficulty
Input_Data$Stimulus[Input_Data$Difficulty == 0] = 0
Input_Data = Input_Data[!is.na(Input_Data$Stimulus) &
!is.na(Input_Data$Response), ]
for (type_idx in c(1:length(type_list))) {
load_M_Optim <-
read.csv(paste("./Results/", type_list[type_idx], ".csv", sep = ""))
print(type_list[type_idx])
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:7])
par = param[6]
lower = 0
upper = 2 * pi
} else  if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_one_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_LLR_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_Prior_amp_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:6])
par = param[5]
lower = 0
upper = 2 * pi
} else if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_no_amp_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:3])
} else if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_no_integration_mouse") {
param = as.numeric(load_M_Optim[load_M_Optim$subject_id == id &
load_M_Optim$session_id == session_id, 1:2])
}
log_evidence = c()
for (trial_idx in seq(
from = 1,
to = nrow(Input_Data) - 2 * sliding_window + 1,
by = sliding_window
)) {
train =  Input_Data[seq(from = trial_idx,
to = trial_idx + sliding_window - 1,
by = 1), ]
test = Input_Data[seq(
from = trial_idx + sliding_window,
to = trial_idx + 2 * sliding_window - 1,
by = 1
), ]
if (type_list[type_idx] == "fit_glaze_osc_zeta_v1_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_one_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_LLR_amp_mouse" |
type_list[type_idx] == "fit_glaze_osc_zeta_v1_Prior_amp_mouse") {
train_O =  optimx(
par,
match.fun(eval_list[type_idx]),
Input_Data = train,
param = param,
lower = lower,
upper = upper
)
log_evidence = c(log_evidence,
-match.fun(eval_list[type_idx])(train_O$p1, test, param))
} else {
log_evidence = c(log_evidence, -match.fun(type_list[type_idx])(param, test))
}
}
add_Optim_eval = data.frame(
subject_id = id,
session_id = session_id,
LL = mean(log_evidence, na.rm = TRUE),
N = nrow(Input_Data),
type = type_list[type_idx]
)
Optim_eval = rbind(Optim_eval, add_Optim_eval)
write.csv(Optim_eval, "./Results/interim_eval.csv")
}
}
}
##
## Latex smallest numbers
##
# smallest_value = .Machine$double.xmin
# replace p = \(0\) with p < \(\ensuremath{2.2\times 10^{-308}}\)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning = FALSE)
options(scipen = -1, digits = 2)
##
## Global settings: what to do in R markdown (compute primary statistics vs. load data from disc)
##
##
## ROOT
##
#root = "/home/veithweilnhammer/Desktop/Modes Data/"
#root = "E:/Modes Data/"
root = "C:/Users/Veith Weilnhammer/Downloads/"
##
## Load/save fully preprocessed data
##
load_summary_data = FALSE
save_summary_data = FALSE
##
## Human Data
##
collect_data = FALSE
n_permutations = 100
compute_slider = FALSE
sliding_window = 10
additional_autocorrelations = FALSE
load_data = TRUE
compute_logreg = FALSE
compute_Tw_LogReg = FALSE
compute_sine_wave_fit = FALSE
compute_power_spectra = FALSE
compute_group_acf = FALSE
compute_training_history = FALSE
compute_metacognitive_sensitivity = FALSE
extract_additional_Slider_Data = FALSE
compute_sliding_log = FALSE
##
## Mouse data
##
preprocess_mouse_data = FALSE
compute_slider_mouse_data = FALSE
filter_mouse_data = FALSE
compute_pretraining_data_mouse = FALSE
load_mouse_data = TRUE
apply_mouse_exclusion_criteria = FALSE
compute_mouse_group_acf = FALSE
compute_mouse_power_spectra = FALSE
compute_mouse_logreg = FALSE
compute_slider_History_Accuracy_lmer = FALSE
compute_mouse_Tw_LogReg = FALSE
mouse_compute_RT_Accuracy_History = FALSE
compute_mouse_training_history = FALSE
extract_mouse_additional_Slider_Data = FALSE
##
## Optimization
##
run_optim_human = FALSE
run_optim_mouse = TRUE
## generate output from fitted data
generate_output_human = FALSE
run_logreg_Confidence_mu_minus_1 = FALSE
generate_output_mouse = FALSE
run_mouse_logreg_mu_minus_1 = FALSE
##
## Simulation
##
# visualize bias
run_visualize_bias_sim = FALSE
run_visualize_alt_sim = FALSE
# Adaptive simulation
run_adaptive_simulation = FALSE
# Posterior Parameters
run_simulation = FALSE
compute_power_spectra_simulation = FALSE
run_control_simulation = FALSE
compute_simulation_control_group_acf = FALSE
visualize_circular_inference = FALSE
#### General Markdown Settings
library(pander)
panderOptions('round', 2)
panderOptions('keep.trailing.zeros', TRUE)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
Model_comp = read.csv("./Results/interim_eval.csv")
head(Model_comp)
Sum_Model_comp <-  ddply(
Model_comp,
.(type),
summarise,
mean = mean(LL, na.rm = TRUE),
error = sd(LL, na.rm = TRUE) / sqrt(length(LL))
)
Sum_Model_comp
