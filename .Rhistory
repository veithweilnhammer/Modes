#root = "/home/veithweilnhammer/Desktop/Modes Data/"
#root = "E:/Modes Data/"
root = "C:/Users/Veith Weilnhammer/Downloads/"
##
## Load/save fully preprocessed data
##
load_summary_data = FALSE
save_summary_data = FALSE
##
## Human Data
##
collect_data = FALSE
n_permutations = 100
compute_slider = FALSE
sliding_window = 10
additional_autocorrelations = FALSE
load_data = TRUE
compute_logreg = FALSE
compute_Tw_LogReg = FALSE
compute_sine_wave_fit = FALSE
compute_power_spectra = FALSE
compute_group_acf = FALSE
compute_training_history = FALSE
compute_metacognitive_sensitivity = FALSE
extract_additional_Slider_Data = FALSE
compute_sliding_log = FALSE
##
## Mouse data
##
preprocess_mouse_data = FALSE
compute_slider_mouse_data = FALSE
filter_mouse_data = FALSE
compute_pretraining_data_mouse = FALSE
load_mouse_data = TRUE
apply_mouse_exclusion_criteria = FALSE
compute_mouse_group_acf = FALSE
compute_mouse_power_spectra = FALSE
compute_mouse_logreg = FALSE
compute_slider_History_Accuracy_lmer = FALSE
compute_mouse_Tw_LogReg = FALSE
mouse_compute_RT_Accuracy_History = FALSE
compute_mouse_training_history = FALSE
extract_mouse_additional_Slider_Data = FALSE
##
## Optimization
##
run_optim_human = FALSE
evaluate_human = FALSE
run_optim_mouse = FALSE
evaluate_mouse = FALSE
## generate output from fitted data
generate_output_human = FALSE
run_logreg_Confidence_mu_minus_1 = FALSE
generate_output_mouse = FALSE
run_mouse_logreg_mu_minus_1 = FALSE
##
## Simulation
##
# visualize bias
run_visualize_bias_sim = FALSE
run_visualize_alt_sim = FALSE
# Adaptive simulation
run_adaptive_simulation = FALSE
# Posterior Parameters
run_simulation = FALSE
compute_power_spectra_simulation = FALSE
run_control_simulation = FALSE
compute_simulation_control_group_acf = FALSE
visualize_circular_inference = FALSE
#### General Markdown Settings
library(pander)
panderOptions('round', 2)
panderOptions('keep.trailing.zeros', TRUE)
library(knitcitations)
cleanbib()
cite_options(citation_format = "pandoc", check.entries = FALSE)
library(bibtex)
if (!load_summary_data) {
if (preprocess_mouse_data) {
loc = paste(root, "/Mouse/export_dataframe.csv", sep = "")
n_permutations = 100
source("./Functions/f_preprocess_mouse_data.R",
local = knitr::knit_global())
MwData <- f_preprocess_mouse_data(loc, n_permutations)
}
##
## Dynamic probability of stimulus- and history-congruence
##
if (compute_slider_mouse_data) {
source("./Functions/f_compute_slider.R", local = knitr::knit_global())
for (subj_idx in unique(MwData$subject_id)) {
print(subj_idx)
for (session_idx in unique(MwData$subject_id)) {
index = (MwData$subject_id == subj_idx & MwData$session_id == session_idx)
MwData$History_slider[index] <- f_compute_slider(MwData$History[index], sliding_window)
MwData$Accuracy_slider[index] <- f_compute_slider(MwData$Accuracy[index], sliding_window)
MwData$RT_slider[index] <- f_compute_slider(MwData$RT[index], sliding_window)
}
}
}
##
## Prepare diagnostics for exclusion criteria
##
if (filter_mouse_data){
MwData$keep = NA
for (subject_idx in unique(MwData$subject_id)) {
print(subject_idx)
for (session_idx in unique(MwData[MwData$subject_id == subject_idx,]$session_id)) {
print(session_idx)
M_Behav_excl <- data.frame()
M_Behav_excl <-
ddply(
MwData[MwData$subject_id == subject_idx & MwData$session_id == session_idx,],
.(Difficulty),
summarise,
History = mean(History, na.rm = TRUE)*100,
Accuracy = mean(Accuracy, na.rm = TRUE)*100,
median_RT = median(RT, na.rm = TRUE)
)
if (max(M_Behav_excl[M_Behav_excl$Difficulty >= 0.5,]$Accuracy, na.rm = TRUE) > 80){
MwData[MwData$subject_id == subject_idx & MwData$session_id == session_idx,]$keep = 1
} else {
MwData[MwData$subject_id == subject_idx & MwData$session_id == session_idx,]$keep = 0
}
}
}
}
## load fully preprocessed data
if (load_mouse_data){
#MwData <- read.csv(paste(root, "/Mouse/balanced_MwData_slider.csv", sep = ""))
MwData <- read.csv(paste(root, "/Mouse/MwData_new_preproc_filter_slider_excl.csv", sep = ""))
}
##
## Apply exlcusion criteria
##
if (apply_mouse_exclusion_criteria){
MwData <- MwData[MwData$keep == 1,]
M_Behav_excl <-
ddply(
MwData,
.(subject_id, session_id),
summarise,
Stimulus_History = mean(Stimulus_History, na.rm = TRUE)*100,
History = mean(History, na.rm = TRUE)*100,
Accuracy = mean(Accuracy, na.rm = TRUE)*100,
Imbalance = mean(abs(0.5-prob_left), na.rm = TRUE)*100 + 50,
RT = mean(RT, na.rm = TRUE)
)
data_select = M_Behav_excl[M_Behav_excl$Imbalance<60,c(1,2)]
sMwData = data.frame()
for (subj_idx in unique(data_select$subject_id)){
print(subj_idx)
row_select = double()
row_select = (MwData$subject_id == subj_idx & MwData$session_id %in% data_select[data_select$subject_id == subj_idx,]$session_id)
sMwData <- rbind(sMwData, MwData[which(row_select),])
}
MwData <- sMwData
}
MwData$clear_RT = MwData$RT
MwData$scaled_RT = scale(MwData$clear_RT)
MwData$clear_RT[MwData$clear_RT > median(MwData$clear_RT, na.rm = TRUE) + 3*median(MwData$clear_RT, na.rm =TRUE)] = NA
MwData$clear_RT2 = MwData$RT
MwData$clear_RT2[MwData$clear_RT2 > median(MwData$clear_RT2, na.rm = TRUE) + 1.5*median(MwData$clear_RT2, na.rm =TRUE)] = NA
##
## compute weighted stimulus
##
MwData$w_Stimulus = 0.5 + (MwData$Stimulus-0.5)*MwData$Difficulty
##
## go to milliseconds
##
MwData$clear_RT <- MwData$clear_RT*1000
MwData$clear_RT2 <- MwData$clear_RT2*1000
n_trials_mice = nrow(MwData)
n_participants_mice = length(unique(MwData$subject_id))
if (save_summary_data) {
save(n_trials_mice, n_participants_mice,
file = "./Summary_Data/size_IBL_dataset.Rdata")
}
} else {
load("./Summary_Data/size_IBL_dataset.Rdata")
}
load("./Summary_Data/size_IBL_dataset.Rdata")
load("./Summary_Data/Summary_Behavior_IBL.Rdata")
load("./Summary_Data/LogReg_mice.Rdata")
debugSource("C:/Users/Veith Weilnhammer/Github/Modes/Functions/f_compute_mouse_group_acf.R")
source("./Functions/f_compute_mouse_group_acf.R", local = knitr::knit_global())
# compute difference to random autocorrelation and remove outliers
MwData$diff_acf_Stimulus = exclude_3SD(MwData$acf_Stimulus- MwData$random_acf_Stimulus)
MwData$diff_acf_History = exclude_3SD(MwData$acf_History - MwData$random_acf_History)
MwData$diff_acf_Difficulty = exclude_3SD(MwData$acf_Difficulty - MwData$random_acf_Difficulty)
MwData$diff_acf_RT = exclude_3SD(MwData$acf_RT - MwData$random_acf_RT)
MwData$diff_acf_HardEasy = exclude_3SD(MwData$acf_HardEasy - MwData$random_acf_HardEasy)
MwData$diff_acf_External = exclude_3SD(MwData$acf_External - MwData$random_acf_External)
acf_to_test = c('diff_acf_Stimulus', 'diff_acf_History')
max_trial = 99
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
debugSource("C:/Users/Veith Weilnhammer/Github/Modes/Functions/f_compute_mouse_group_acf.R")
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
MEM <- summary(lmer(Y ~ 1 + (1|session_id/diff_acf_External) + (1|session_id/diff_acf_Difficulty) , data = PwTest))
print(trial_idx)
PwTest <- data.frame()
Y = double()
PwTest <- PwData[PwData$Trial == trial_idx , colnames(PwData) %in% c(paste(acf_to_test[acf_idx]), 'diff_acf_External', 'diff_acf_Difficulty', 'session_id')]
assign("Y", PwTest[,acf_to_test[acf_idx]])
PwTest$Y <- exclude_3SD(Y)
MEM <- summary(lmer(Y ~ 1 + (1|session_id/diff_acf_External) + (1|session_id/diff_acf_Difficulty) , data = PwTest))
MEM <- summary(lmer(Y ~ 1 + (1|diff_acf_External) + (1|diff_acf_Difficulty) , data = PwTest))
PwTest
summary(lmer(Y ~ 1 + (1|diff_acf_External), data = PwTest))
summary(lmer(Y ~ 1 + diff_acf_External + (1|session_id) , data = PwTest))
summary(lmer(Y ~ 1 + (1|session_id/diff_acf_External), data = PwTest))
summary(lmer(Y ~ 1 + diff_acf_External + diff_acf_Difficulty + (1|session_id), data = PwTest))
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
source("./Functions/f_compute_mouse_group_acf.R", local = knitr::knit_global())
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
M_Summary_acf
debugSource("C:/Users/Veith Weilnhammer/Github/Modes/Functions/f_compute_group_acf.R")
f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
MEM <- summary(lmer(Y ~ 1 + diff_acf_External + diff_acf_Difficulty + (1|session_id), data = PwTest))
MEM$coefficients
MEM$coefficients[5]
MEM$coefficients[9]
MEM$coefficients[11]
MEM$coefficients[1]
MEM$coefficients[2]
MEM$coefficients[3]
MEM$coefficients[4]
MEM$coefficients[5]
MEM$coefficients[6]
MEM$coefficients[7]
MEM$coefficients[8]
MEM$coefficients[10]
MEM$coefficients[11]
MEM$coefficients[12]
MEM$coefficients[13]
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
M_Summary_acf
source("./Functions/f_compute_mouse_group_acf.R", local = knitr::knit_global())
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
M_Summary_acf
M_Summary_acf
min(which(M_Summary_acf[M_Summary_acf$Variable == "diff_acf_Stimulus",]$p == "> 0.05")) - 1
min(which(M_Summary_acf[M_Summary_acf$Variable == "diff_acf_History",]$p == "> 0.05")) - 1
M_Summary_acf <- read.csv("./Results/M_Summary_acf_session_corrected_normalized_3SD_new_preproc.csv")
min(which(M_Summary_acf[M_Summary_acf$Variable == "diff_acf_Stimulus",]$p == "> 0.05")) - 1
min(which(M_Summary_acf[M_Summary_acf$Variable == "diff_acf_History",]$p == "> 0.05")) - 1
M_Summary_acf <- f_compute_mouse_group_acf(MwData, acf_to_test, max_trial)
write.csv(M_Summary_acf, "./Results/M_Summary_acf_session_full_control.csv", row.names = FALSE)
M_Summary_acf$Trial <- M_Summary_acf$Trial - 1
ID_M_Summary_acf <- ddply(
MwData,
.(subject_id),
summarise,
lag_significant_Stimulus = min(which(diff(which(c(0, exceed_acf_Stimulus,0) < n_permutations/2)) != 1)) - 1,
lag_significant_History = min(which(diff(which(c(0, exceed_acf_History,0) < n_permutations/2)) != 1)) - 1,
lag_significant_Difficulty = min(which(diff(which(c(0, exceed_acf_Difficulty,0) < n_permutations/2)) != 1)) - 1,
lag_significant_External = min(which(diff(which(c(0, exceed_acf_External,0) < n_permutations/2)) != 1)) - 1
)
ID_M_Summary_acf$lag_significant_Stimulus[ID_M_Summary_acf$lag_significant_Stimulus == Inf] = NA
ID_M_Summary_acf$lag_significant_History[ID_M_Summary_acf$lag_significant_History == Inf] = NA
ID_M_Summary_acf$lag_significant_Difficulty[ID_M_Summary_acf$lag_significant_Difficulty == Inf] = NA
ID_M_Summary_acf$lag_significant_External[ID_M_Summary_acf$lag_significant_External == Inf] = NA
##
## Exceed Plot
##
gathercol <- colnames(ID_M_Summary_acf[,c(2,3)])
ID_M_Summary_acf_long  <-
gather(ID_M_Summary_acf,
"Variable",
"Lag",
gathercol,
factor_key = TRUE)
M_Stimulus_linear <- summary(lm(Mean ~ Trial , data = M_Summary_acf[M_Summary_acf$Variable == "diff_acf_Stimulus" & M_Summary_acf$Trial < 21,]))
M_Stimulus_exponential <- summary(lm(log(Mean) ~ Trial , data = M_Summary_acf[M_Summary_acf$Variable == "diff_acf_Stimulus" & M_Summary_acf$Trial < 21,]))
M_History_linear <- summary(lm(Mean ~ Trial , data = M_Summary_acf[M_Summary_acf$Variable == "diff_acf_History" & M_Summary_acf$Trial < 21,]))
M_History_exponential <- summary(lm(log(Mean) ~ Trial , data = M_Summary_acf[M_Summary_acf$Variable == "diff_acf_History" & M_Summary_acf$Trial < 21,]))
MwData$min_diff_acf_Stimulus = MwData$diff_acf_Stimulus - min(MwData$diff_acf_Stimulus, na.rm = TRUE)
MwData$min_diff_acf_History = MwData$diff_acf_History - min(MwData$diff_acf_History, na.rm = TRUE)
M_lmer_acf_Stimulus <- lmer(log(min_diff_acf_Stimulus) ~ Trial + (1|subject_id), data = MwData[MwData$Trial > 1 & MwData$Trial < 21,])
M_STAT.lmer_acf_Stimulus <- summary(M_lmer_acf_Stimulus)
M_lmer_acf_History <- lmer(log(min_diff_acf_History) ~ Trial + (1|subject_id), data = MwData[MwData$Trial > 1 & MwData$Trial < 21,])
M_STAT.lmer_acf_History <- summary(M_lmer_acf_History)
save(M_Summary_acf,
ID_M_Summary_acf,
ID_M_Summary_acf_long,
M_Stimulus_linear,
M_Stimulus_exponential,
M_History_linear,
M_History_exponential,
M_STAT.lmer_acf_Stimulus,
M_STAT.lmer_acf_History,
file = "./Summary_Data/Autocorrelation_mice.Rdata")
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: Stimulus-congruence",]$p_value > 0.05))
load("./Summary_Data/log_reg_autocorrelation.Rdata")
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: Stimulus-congruence",]$p_value > 0.05))
load("./Summary_Data/log_reg_autocorrelation.Rdata")
Group_Tw_LogReg_long
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: Stimulus-congruence",]$p_value > 0.05))
load("./Summary_Data/log_reg_autocorrelation_mouse.Rdata")
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: Stimulus-congruence",]$p_value > 0.05))
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: History-congruence",]$p_value > 0.05))
n_back = 100
source("./Functions/f_compute_mouse_trial_wise_logreg.R",
local = knitr::knit_global())
M_Tw_LogReg <- f_compute_mouse_trial_wise_logreg(MwData, n_back)
write.csv(M_Tw_LogReg, "./Results/M_Tw_LogReg_new_preproc_100back.csv", row.names = FALSE)
gathercol = colnames(M_Tw_LogReg[, c(4, 6)])
M_Tw_LogReg_long <-
gather(M_Tw_LogReg[, c(1:4, 6)],
"Variable",
"beta",
gathercol,
factor_key = TRUE)
M_Tw_LogReg_long$Variable <-
gsub("History_weight",
"Weight: History-congruence",
M_Tw_LogReg_long$Variable)
M_Tw_LogReg_long$Variable <-
gsub("Stimulus_weight",
"Weight: Stimulus-congruence",
M_Tw_LogReg_long$Variable)
M_Group_Tw_LogReg_long <-  ddply(
M_Tw_LogReg_long,
.(lag, Variable),
summarise,
Mean = mean(exclude_3SD(beta), na.rm = TRUE),
Error = sd(exclude_3SD(beta), na.rm = TRUE) / sqrt(length(exclude_3SD(beta)))
)
## trial-wise stats
M_Group_Tw_LogReg_long$p_value = NA
for (lag_idx in c(1:n_back)) {
M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: History-congruence" &
M_Group_Tw_LogReg_long$lag == lag_idx, ]$p_value <-
summary(lmer(exclude_3SD(History_weight) ~ 1 + (1 |
session_id) , data = M_Tw_LogReg[M_Tw_LogReg$lag == lag_idx, ]))$coefficients[5]
M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: Stimulus-congruence" &
M_Group_Tw_LogReg_long$lag == lag_idx, ]$p_value <-
summary(lmer(exclude_3SD(Stimulus_weight) ~ 1 + (1 |
session_id) , data = M_Tw_LogReg[M_Tw_LogReg$lag == lag_idx, ]))$coefficients[5]
}
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: History-congruence",]$p_value > 0.05))
min(which(M_Group_Tw_LogReg_long[M_Group_Tw_LogReg_long$Variable == "Weight: Stimulus-congruence",]$p_value > 0.05))
Sum_Bias_Sim <- read.csv("./Results/Sum_Rep_Alt_Sim.csv")
p_Sum_Rep_Alt_Sim <- ggplot() +
geom_errorbar(
data = Sum_Rep_Alt_Sim,
aes(
x = trial,
ymin = mean - error,
ymax = mean + error,
color = type
),
width = 0.5,
alpha = 0.5,
size = 0.5,
) +
geom_line(
data = Sum_Rep_Alt_Sim,
aes(x = trial,
y = mean,
color = type),
linetype = "dotted"
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +
theme_classic(base_size = 6) + labs(
x = "Lag (Trials)",
y =
paste("Autocorrelation coefficient: History congruence"),
subtitle = NULL
) + xlim(0, 25.5) + scale_color_brewer(palette = "Set1", direction = -1) + theme(legend.position = c(0.5, 0.9), legend.box = "horizontal") +  scale_x_continuous(
breaks = seq(1, 25, by = 4),
labels = seq(1, 25, by = 4),
limits = c(0, 25)
) #+ ylim(-0.01, 0.035)
Sum_Rep_Alt_Sim <- read.csv("./Results/Sum_Rep_Alt_Sim.csv")
p_Sum_Rep_Alt_Sim <- ggplot() +
geom_errorbar(
data = Sum_Rep_Alt_Sim,
aes(
x = trial,
ymin = mean - error,
ymax = mean + error,
color = type
),
width = 0.5,
alpha = 0.5,
size = 0.5,
) +
geom_line(
data = Sum_Rep_Alt_Sim,
aes(x = trial,
y = mean,
color = type),
linetype = "dotted"
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +
theme_classic(base_size = 6) + labs(
x = "Lag (Trials)",
y =
paste("Autocorrelation coefficient: History congruence"),
subtitle = NULL
) + xlim(0, 25.5) + scale_color_brewer(palette = "Set1", direction = -1) + theme(legend.position = c(0.5, 0.9), legend.box = "horizontal") +  scale_x_continuous(
breaks = seq(1, 25, by = 4),
labels = seq(1, 25, by = 4),
limits = c(0, 25)
) #+ ylim(-0.01, 0.035)
p_Sum_Rep_Alt_Sim
unique(Sum_Rep_Alt_Sim$type)
Sum_Rep_Alt_Sim$type = gsub("Attraction", "Repeating", Sum_Rep_Alt_Sim$type)
Sum_Rep_Alt_Sim$type = gsub("Attraction", "Repeating", Sum_Rep_Alt_Sim$type)
Sum_Rep_Alt_Sim$type = gsub("Repulsion", "Alternating", Sum_Rep_Alt_Sim$type)
p_Sum_Rep_Alt_Sim <- ggplot() +
geom_errorbar(
data = Sum_Rep_Alt_Sim,
aes(
x = trial,
ymin = mean - error,
ymax = mean + error,
color = type
),
width = 0.5,
alpha = 0.5,
size = 0.5,
) +
geom_line(
data = Sum_Rep_Alt_Sim,
aes(x = trial,
y = mean,
color = type),
linetype = "dotted"
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +
theme_classic(base_size = 6) + labs(
x = "Lag (Trials)",
y =
paste("Autocorrelation coefficient: History congruence"),
subtitle = NULL
) + xlim(0, 25.5) + scale_color_brewer(palette = "Set1", direction = -1) + theme(legend.position = c(0.5, 0.9), legend.box = "horizontal") +  scale_x_continuous(
breaks = seq(1, 25, by = 4),
labels = seq(1, 25, by = 4),
limits = c(0, 25)
) #+ ylim(-0.01, 0.035)
p_Sum_Rep_Alt_Sim
Sum_Rep_Alt_Sim$type = gsub("Attraction", "Repeating", Sum_Rep_Alt_Sim$type)
Sum_Rep_Alt_Sim$type = gsub("Repulsion", "Alternating", Sum_Rep_Alt_Sim$type)
p_Sum_Rep_Alt_Sim <- ggplot() +
geom_errorbar(
data = Sum_Rep_Alt_Sim,
aes(
x = trial,
ymin = mean - error,
ymax = mean + error,
color = type
),
width = 0.5,
alpha = 0.5,
size = 0.5,
) +
geom_line(
data = Sum_Rep_Alt_Sim,
aes(x = trial,
y = mean,
color = type),
linetype = "dotted"
) +
geom_hline(
yintercept = 0,
linetype = "dashed",
color = "black",
size = 0.25
) +
theme_classic(base_size = 6) + labs(
x = "Lag (Trials)",
y =
paste("Autocorrelation coefficient: History congruence"),
subtitle = NULL
) + xlim(0, 25.5) + scale_color_brewer(palette = "Set1", direction = 1) + theme(legend.position = c(0.5, 0.9), legend.box = "horizontal") +  scale_x_continuous(
breaks = seq(1, 25, by = 4),
labels = seq(1, 25, by = 4),
limits = c(0, 25)
) #+ ylim(-0.01, 0.035)
p_Sum_Rep_Alt_Sim
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
lay <- rbind(c(1), c(2))
grid.arrange(
p_distribution_Sum_Model_AIC,
p_distribution_Sum_Subj_Model_AIC,
layout_matrix = lay,
heights = c(0.75,1),
widths = c(1))
